package com.example.demo.question.dominio;

// default package
// Generated 15 sep 2020 12:52:23 by Hibernate Tools 5.1.10.Final

import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import com.example.demo.category.domino.Category;
import com.example.demo.choice.dominio.Choice;
import com.example.demo.question.dominio.dtos.QuestionNewSurveyDto;
import com.example.demo.questiontype.dominio.Questiontype;
import com.example.demo.survey.dominio.Survey;
import com.example.demo.surveyparticipantanswer.dominio.ApplicationHasQuestion;
import com.example.demo.util.dominio.Views;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonView;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;

/**
 * Question generated by hbm2java
 */
@Entity
@Table(name = "question", catalog = "encuesta")
public class Question implements java.io.Serializable {

	@JsonView(Views.User.class)
	private int questionId;

	private Category category;

	@JsonView(Views.User.class)
	private Questiontype questiontype;

	@JsonView(Views.User.class)
	private Boolean questionAnswerRequired;

	@JsonView(Views.User.class)
	private String questionName;

	@JsonView(Views.User.class)
	private Integer questionNumber;

	@JsonView(Views.User.class)
	private String questionText;

	private Set<ApplicationHasQuestion> applicationHasQuestions = new HashSet<ApplicationHasQuestion>(0);

	@JsonView(Views.User.class)
	private Set<Choice> choices = new HashSet<Choice>(0);

	public Question() {
	}

	public Question(Category category, Questiontype questiontype) {
		this.category = category;
		this.questiontype = questiontype;
	}

	public Question(Category category, Questiontype questiontype, Boolean questionAnswerRequired, String questionName,
			Integer questionNumber, String questionText, Set<Choice> choices,
			Set<ApplicationHasQuestion> applicationHasQuestions) {
		this.category = category;
		this.questiontype = questiontype;
		this.questionAnswerRequired = questionAnswerRequired;
		this.questionName = questionName;
		this.questionNumber = questionNumber;
		this.questionText = questionText;
		this.choices = choices;
		this.applicationHasQuestions = applicationHasQuestions;
	}

	public Question(QuestionNewSurveyDto tempp) {
		this.questionName = tempp.getQuestionName();
		this.questiontype = new Questiontype("rank");
		// TODO Auto-generated constructor stub
	}

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "QuestionID", nullable = false)
	public int getQuestionId() {
		return this.questionId;
	}

	public void setQuestionId(int questionId) {
		this.questionId = questionId;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "category_CategoryID", insertable = false, updatable = false, nullable = false)
	public Category getCategory() {
		return this.category;
	}

	public void setCategory(Category category) {
		this.category = category;
	}

	@JsonIgnoreProperties({ "hibernateLazyInitializer", "handler" })
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "questiontype_QuestionTypeCode", nullable = false)
	public Questiontype getQuestiontype() {
		return this.questiontype;
	}

	public void setQuestiontype(Questiontype questiontype) {
		this.questiontype = questiontype;
	}

	@Column(name = "QuestionAnswerRequired")
	public Boolean getQuestionAnswerRequired() {
		return this.questionAnswerRequired;
	}

	public void setQuestionAnswerRequired(Boolean questionAnswerRequired) {
		this.questionAnswerRequired = questionAnswerRequired;
	}

	@Column(name = "QuestionName", length = 80)
	public String getQuestionName() {
		return this.questionName;
	}

	public void setQuestionName(String questionName) {
		this.questionName = questionName;
	}

	@Column(name = "QuestionNumber")
	public Integer getQuestionNumber() {
		return this.questionNumber;
	}

	public void setQuestionNumber(Integer questionNumber) {
		this.questionNumber = questionNumber;
	}

	@Column(name = "QuestionText")
	public String getQuestionText() {
		return this.questionText;
	}

	public void setQuestionText(String questionText) {
		this.questionText = questionText;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "question")
	public Set<Choice> getChoices() {
		return this.choices;
	}

	public void setChoices(Set<Choice> choices) {
		this.choices = choices;
	}

	@OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL, mappedBy = "question")
	public Set<ApplicationHasQuestion> getApplicationHasQuestions() {
		return this.applicationHasQuestions;
	}

	public void setApplicationHasQuestions(Set<ApplicationHasQuestion> applicationHasQuestions) {
		this.applicationHasQuestions = applicationHasQuestions;
	}

}