package com.example.demo.survey.dominio;

import java.time.Instant;
import java.time.LocalDate;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.ZonedDateTime;
import java.time.chrono.ChronoLocalDate;
import java.util.Calendar;

// default package
// Generated 15 sep 2020 12:52:23 by Hibernate Tools 5.1.10.Final

import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.TimeZone;
import java.util.stream.Collectors;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.example.demo.category.domino.Category;
import com.example.demo.category.domino.dtos.CategoryNewSurveyDto;
import com.example.demo.question.dominio.Question;
import com.example.demo.survey.dominio.dtos.SegmentationNewSurveyDto;
import com.example.demo.survey.dominio.dtos.SurveyListDto;
import com.example.demo.survey.dominio.dtos.SurveyNewSurveyDto;
import com.example.demo.surveyparticipant.dominio.Surveyparticipant;
import com.example.demo.surveyparticipant.dominio.dtos.SurveyparticipantNewSurveyDto;
import com.example.demo.util.dominio.Views;
import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonView;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;

/**
 * Survey generated by hbm2java
 */
@Entity
@Table(name = "survey", catalog = "encuesta")
public class Survey implements java.io.Serializable {

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "SurveyID", unique = true, nullable = false)
	private int surveyId;

	@Column(name = "SurveyDescription")
	private String surveyDescription;

	@Column(name = "SurveyExitMessage")
	private String surveyExitMessage;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "SurveyExpirationDate", length = 26)
	private Date surveyExpirationDate;

	@Column(name = "SurveyName", length = 40, unique = true, nullable = false)
	private String surveyName;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "SurveyPublicationDate", length = 26)
	private Date surveyPublicationDate;

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "SurveyStartDate", length = 26)
	private Date surveyStartDate;

	@Column(name = "SurveyWelcomeMessage")
	private String surveyWelcomeMessage;

	@Column(name = "AllowMultipleApplications", nullable = false)
	private boolean allowMultipleApplications;

	@Column(name = "SurveyActive", nullable = false)
	private boolean surveyActive;

	@OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinColumn(name = "survey_SurveyID", nullable = false)
	private Set<Category> categories = new HashSet<Category>(0);

	@OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinColumn(name = "survey_SurveyID", nullable=false)
	private Set<Surveyparticipant> surveyparticipants = new HashSet<Surveyparticipant>(0);

	@OneToMany(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
	@JoinColumn(name = "survey_SurveyID", nullable=false)
	private Set<Segmentation> segmentations = new HashSet<Segmentation>(0);

	public Survey() {
		super();
	}

	public Survey(boolean surveyActive, String surveyName, boolean allowMultipleApplications) {
		this.surveyActive = surveyActive;
		this.surveyName = surveyName;
		this.allowMultipleApplications = allowMultipleApplications;
	}

	public Survey(boolean surveyActive, String surveyDescription, String surveyExitMessage, Date surveyExpirationDate,
			String surveyName, Date surveyPublicationDate, Date surveyStartDate, String surveyWelcomeMessage,
			boolean allowMultipleApplications, Set<Category> categories, Set<Surveyparticipant> surveyparticipants,
			Set<Segmentation> segmentations) {
		this.surveyActive = surveyActive;
		this.surveyDescription = surveyDescription;
		this.surveyExitMessage = surveyExitMessage;
		this.surveyExpirationDate = surveyExpirationDate;
		this.surveyName = surveyName;
		this.surveyPublicationDate = surveyPublicationDate;
		this.surveyStartDate = surveyStartDate;
		this.surveyWelcomeMessage = surveyWelcomeMessage;
		this.allowMultipleApplications = allowMultipleApplications;
		this.categories = categories;
		this.surveyparticipants = surveyparticipants;
		this.segmentations = segmentations;
	}

	public Survey(String surveyDescription, Date surveyExpirationDate, String surveyName, Date surveyStartDate,
			boolean surveyActive, Set<Category> categories, Set<Surveyparticipant> surveyparticipants,
			Set<Segmentation> segmentations) {
		super();
		this.surveyDescription = surveyDescription;
		this.surveyExpirationDate = surveyExpirationDate;
		this.surveyName = surveyName;
		this.surveyStartDate = surveyStartDate;
		this.surveyActive = surveyActive;
		this.categories = categories;
		this.surveyparticipants = surveyparticipants;
		this.segmentations = segmentations;
	}

	public Survey(SurveyNewSurveyDto surveyNewSurveyDto) {
		this.surveyActive = true;
		this.allowMultipleApplications = true;
		this.surveyName = surveyNewSurveyDto.getSurveyName();
		this.surveyDescription = surveyNewSurveyDto.getSurveyDescription();
		this.surveyExpirationDate = surveyNewSurveyDto.getSurveyExpirationDate();
		this.surveyName = surveyNewSurveyDto.getSurveyName();
		this.surveyStartDate = surveyNewSurveyDto.getSurveyStartDate();
		this.categories = surveyNewSurveyDto.getCategories().stream().map(temp -> {
			Category p = new Category(temp);
			return p;
		}).collect(Collectors.toSet());
		this.segmentations =
				  surveyNewSurveyDto.getSegmentations().stream().map(temp -> {
				  Segmentation p = new Segmentation(temp); return p;
				  }).collect(Collectors.toSet());

	}

	public int getSurveyId() {
		return this.surveyId;
	}

	public void setSurveyId(int surveyId) {
		this.surveyId = surveyId;
	}

	public String getSurveyDescription() {
		return this.surveyDescription;
	}

	public void setSurveyDescription(String surveyDescription) {
		this.surveyDescription = surveyDescription;
	}

	public String getSurveyExitMessage() {
		return this.surveyExitMessage;
	}

	public void setSurveyExitMessage(String surveyExitMessage) {
		this.surveyExitMessage = surveyExitMessage;
	}

	public Date getSurveyExpirationDate() {
		return this.surveyExpirationDate;
	}

	public void setSurveyExpirationDate(Date surveyExpirationDate) {
		this.surveyExpirationDate = surveyExpirationDate;
	}

	public String getSurveyName() {
		return this.surveyName;
	}

	public void setSurveyName(String surveyName) {
		this.surveyName = surveyName;
	}

	public Date getSurveyPublicationDate() {
		return this.surveyPublicationDate;
	}

	public void setSurveyPublicationDate(Date surveyPublicationDate) {
		this.surveyPublicationDate = surveyPublicationDate;
	}

	public Date getSurveyStartDate() {
		return this.surveyStartDate;
	}

	public void setSurveyStartDate(Date surveyStartDate) {
		this.surveyStartDate = surveyStartDate;
	}

	public String getSurveyWelcomeMessage() {
		return this.surveyWelcomeMessage;
	}

	public void setSurveyWelcomeMessage(String surveyWelcomeMessage) {
		this.surveyWelcomeMessage = surveyWelcomeMessage;
	}

	public boolean getAllowMultipleApplications() {
		return this.allowMultipleApplications;
	}

	public void setAllowMultipleApplications(boolean allowMultipleApplications) {
		this.allowMultipleApplications = allowMultipleApplications;
	}

	public boolean getSurveyActive() {
		return this.surveyActive;
	}

	public void setSurveyActive(boolean surveyActive) {
		this.surveyActive = surveyActive;
	}

	public Set<Category> getCategories() {
		return this.categories;
	}

	public void setCategories(Set<Category> categories) {
		this.categories = categories;
	}

	public Set<Surveyparticipant> getSurveyparticipants() {
		return this.surveyparticipants;
	}

	public void setSurveyparticipants(Set<Surveyparticipant> surveyparticipants) {
		this.surveyparticipants = surveyparticipants;
	}

	public Set<Segmentation> getSegmentations() {
		return this.segmentations;
	}

	public void setSegmentations(Set<Segmentation> segmentations) {
		this.segmentations = segmentations;
	}

	public Boolean surveyExpired() {
		TimeZone timeZone = TimeZone.getTimeZone("America/Mexico_City");
		Calendar calendar = Calendar.getInstance(timeZone);
		calendar.set(Calendar.HOUR_OF_DAY, -5);
		calendar.set(Calendar.MINUTE, 0);
		calendar.set(Calendar.SECOND, 0);
		calendar.set(Calendar.MILLISECOND, 0);
		if (surveyStartDate == null || surveyExpirationDate == null)
			return false;
		return calendar.getTime().before(surveyStartDate) || calendar.getTime().after(surveyExpirationDate);
	}

	public Date currenDate() {
		TimeZone timeZone = TimeZone.getTimeZone("America/Mexico_City");
		Calendar calendar = Calendar.getInstance(timeZone);
		calendar.set(Calendar.HOUR_OF_DAY, -5);
		calendar.set(Calendar.MINUTE, 0);
		calendar.set(Calendar.SECOND, 0);
		calendar.set(Calendar.MILLISECOND, 0);
		return calendar.getTime();
	}

}
